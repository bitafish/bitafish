// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid())
  firstName       String
  lastName        String
  email           String       @unique
  phoneNumber     String?
  password        String
  role            RoleEnumType @default(client)
  image           String?      @default("")
  isEmailVerified Boolean?     @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  Reviews Reviews[]

  @@map(name: "users")
}

enum RoleEnumType {
  client
  admin
}

model Product {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Reviews Reviews[]
}

model Category {
  id   String @id @default(uuid())
  name String @unique
}

model Reviews {
  id        String   @id @default(uuid())
  userId    String
  productId String
  stars     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map(name: "reviews")
}

enum OrderStatus {
  completed
  pending
  delivering
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  totalPrice      Float
  shippingAddress String
  status          OrderStatus @default(pending)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  orderItems OrderItem[]

  @@map(name: "orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map(name: "orderItems")
}
